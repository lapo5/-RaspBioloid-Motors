#!/usr/bin/env python

import rospy
from threading import Lock
import dynamixel_sdk as sdk
from motors_msgs.msg import *
from motors_srvs.srv import *

go = Lock()

portHandler = sdk.PortHandler("/dev/ttyACM0")
packetHandler = sdk.PacketHandler(1.0)
portHandler.openPort()
portHandler.setBaudRate(1000000)
cont = 18

torque_state = [False for i in range(0, cont)]
goals = [-1 for i in range(0, cont)]

for i in range(0, cont):
    data, _, _ = packetHandler.readTxRx(portHandler, i + 1, 30, 2)
    goals[i] = sdk.DXL_MAKEWORD(data[0], data[1])


def move_motor(req):
    global packetHandler
    global portHandler
    global goals
    go.acquire()
    ok, _ = packetHandler.write2ByteTxRx(port=portHandler,
                                           dxl_id=req.id,
                                           address=24,  # TORQUE
                                           data=1)
    ok, _ = packetHandler.write2ByteTxRx(port=portHandler,
                                           dxl_id=req.id,
                                           address=32,  # SPEED
                                           data=req.vel)
    ok, _ = packetHandler.write2ByteTxRx(port=portHandler,
                                           dxl_id=req.id,
                                           address=30,  # GOAL
                                           data=req.pos)
    goals[req.id - 1] = req.pos
    torque_state[req.id - 1] = True
    go.release()
    return MoveMotorResponse(ok == sdk.COMM_SUCCESS)


def torque_motor(req):
    global packetHandler
    global portHandler
    global torque_state
    go.acquire()
    ok, _ = packetHandler.write2ByteTxRx(port=portHandler,
                                           dxl_id=req.id,
                                           address=24,  # TORQUE
                                           data=req.mode)
    torque_state[req.id - 1] = bool(req.mode)
    ret_data, _, _ = packetHandler.readTxRx(portHandler, req.id, 30, 2)
    goals[req.id - 1] = sdk.DXL_MAKEWORD(ret_data[0], ret_data[1])
    go.release()
    return TorqueResponse(ok == sdk.COMM_SUCCESS)


def torque_all(req):
    global packetHandler
    global cont
    global portHandler
    global torque_state
    go.acquire()
    ok = sdk.COMM_SUCCESS
    for i in range(1, cont + 1):
        ok, _ = packetHandler.write2ByteTxRx(port=portHandler,
                                               dxl_id=i,
                                               address=24,  # TORQUE
                                               data=req.mode)
        torque_state[i - 1] = bool(req.mode)
        ret_data, _, _ = packetHandler.readTxRx(portHandler, i, 30, 2)
        goals[i - 1] = sdk.DXL_MAKEWORD(ret_data[0], ret_data[1])

    go.release()
    #FIXME we check only the last returned code
    return TorqueAllResponse(ok == sdk.COMM_SUCCESS)


def motor_monitor():
    rospy.init_node('motor_monitor', anonymous=True)

    pub = []

    global packetHandler
    global cont
    global torque_state
    global goals
    for i in range(1, cont + 1):
        pub.append(rospy.Publisher('motors_info/%d' % i, MotorInfo, queue_size=2))
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=5,  # RETURN DELAY TIME
                                length=1,
                                data=[0])  # VALUE: 0us
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=24,  # TORQUE ENABLE
                                length=1,
                                data=[1])  # VALUE: ON
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=14,  # MAX TORQUE
                                length=2,
                                data=[255, 3])  # VALUE: 1024
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=12,  # MIN/MAX VOLTAGE
                                length=2,
                                data=[80, 140])
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=17,  # ALARM LED
                                length=1,
                                data=[
                                    0b00101111])  # VALUE: OVERLOAD + RANGE + OVERHEATING + ANGLE LIMIT + VOLTAGE RANGE
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=18,  # ALARM SHUTDOWN
                                length=1,
                                data=[0b00000101])  # VALUE: OVERHEATING + VOLTAGE RANGE
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=26,  # COMPLIANCE MARGIN (SX/DX)
                                length=2,
                                data=[1, 1])  # VALUE: MIN
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=28,  # COMPLIANCE SLOPE (SX/DX)
                                length=2,
                                data=[16, 16])  # VALUE: 5 STEPS
        packetHandler.writeTxRx(port=portHandler,
                                dxl_id=i,
                                address=48,  # PUNCH
                                length=2,
                                data=[32, 0])  # VALUE: 64
        torque_state[i - 1] = True
    motor_msg = MotorInfo()

    rate = rospy.Rate(1000)
    while not rospy.is_shutdown():
        for i in range(1, cont + 1):
            go.acquire()
            ret_data, _, _ = packetHandler.readTxRx(port=portHandler,
                                                dxl_id=i,
                                                address=36,  # POSITION | SPEED | LOAD
                                                length=6)
            motor_msg.Locked = torque_state[i - 1]
            go.release()
            if len(data) != 6: continue
            pos = sdk.DXL_MAKEWORD(ret_data[0], ret_data[1])
            speed = sdk.DXL_MAKEWORD(ret_data[2], ret_data[3])
            load = sdk.DXL_MAKEWORD(ret_data[4], ret_data[5])

            motor_msg.header.frame_id = "motors"
            motor_msg.header.stamp = rospy.Time.now()
            motor_msg.Pos = pos
            motor_msg.Speed = speed if speed < 1024 else 1024 - speed
            motor_msg.Load = load if load < 1024 else 1024 - load
            motor_msg.Goal = goals[i - 1]

            pub[i - 1].publish(motor_msg)

        # rospy.loginfo(motor_msg)

        rate.sleep()

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()


if __name__ == '__main__':
    s1 = rospy.Service('move_motor', MoveMotor, move_motor)
    s2 = rospy.Service('torque_motor', Torque, torque_motor)
    s3 = rospy.Service('torque_all', TorqueAll, torque_all)
    motor_monitor()
