#!/usr/bin/env python

import rospy
import sys
import dynamixel_workbench as dw
from motors.msg import *

def motor_monitor():
	rospy.init_node('motor_monitor', anonymous=True)

	pub = []
	superPublisher = rospy.Publisher('motors_info', MotorsStatus, queue_size=1)
	workbench = dw.DynamixelWorkbench()
	workbench.begin("/dev/ttyACM0", 1000000)
	isOK, cont, ids = workbench.scan(18)
	for i in range(0, cont):
		pub.append(rospy.Publisher('motors_info/'+str(ids[i]), MotorMsg, queue_size=1))
	
	motor_msg = []
	for i in range(0,cont):
		motor_msg.append(MotorMsg())
	motors_status = MotorsStatus()

	rate = rospy.Rate(1)
	while not rospy.is_shutdown():
		isOk, positions = workbench.readAllPresentPosition(cont)
		isOk2, speeds = workbench.readAllPresentSpeed(cont)
		isOk3, voltages = workbench.readAllPresentVoltage(cont)
		isOk4, temperatures = workbench.readAllPresentTemperature(cont)
		
		if(isOk and isOk2 and isOk3 and isOk4):
			for i in range(0, cont):
				motor_msg[i].Pos = positions[i]
				motor_msg[i].Speed = speeds[i]
				motor_msg[i].Voltage = voltages[i]
				motor_msg[i].Temperature = temperatures[i]
				pub[i].publish(motor_msg[i])

			motors_status.Motors = motor_msg
			superPublisher.publish(motors_status)
			#rospy.loginfo(motor_msg)
		rate.sleep()


	# spin() simply keeps python from exiting until this node is stopped
	rospy.spin()

if __name__ == '__main__':
	motor_monitor()
